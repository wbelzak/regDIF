// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bernoulli_traceline4
List bernoulli_traceline4(arma::vec p_item, arma::vec theta, arma::mat predictors, double samp_size, double num_quadpts);
RcppExport SEXP _regDIF_bernoulli_traceline4(SEXP p_itemSEXP, SEXP thetaSEXP, SEXP predictorsSEXP, SEXP samp_sizeSEXP, SEXP num_quadptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type p_item(p_itemSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type predictors(predictorsSEXP);
    Rcpp::traits::input_parameter< double >::type samp_size(samp_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type num_quadpts(num_quadptsSEXP);
    rcpp_result_gen = Rcpp::wrap(bernoulli_traceline4(p_item, theta, predictors, samp_size, num_quadpts));
    return rcpp_result_gen;
END_RCPP
}
// estep
List estep(List p, arma::vec theta, arma::mat responses, arma::mat predictors, double samp_size, double num_items, arma::vec num_responses, double num_quadpts);
RcppExport SEXP _regDIF_estep(SEXP pSEXP, SEXP thetaSEXP, SEXP responsesSEXP, SEXP predictorsSEXP, SEXP samp_sizeSEXP, SEXP num_itemsSEXP, SEXP num_responsesSEXP, SEXP num_quadptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type responses(responsesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type predictors(predictorsSEXP);
    Rcpp::traits::input_parameter< double >::type samp_size(samp_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type num_items(num_itemsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type num_responses(num_responsesSEXP);
    Rcpp::traits::input_parameter< double >::type num_quadpts(num_quadptsSEXP);
    rcpp_result_gen = Rcpp::wrap(estep(p, theta, responses, predictors, samp_size, num_items, num_responses, num_quadpts));
    return rcpp_result_gen;
END_RCPP
}
// bernoulli_traceline
List bernoulli_traceline(double p_c0, double p_a0, arma::vec p_c1, arma::vec p_a1, arma::vec theta, arma::mat predictors, double samp_size, double num_quadpts);
RcppExport SEXP _regDIF_bernoulli_traceline(SEXP p_c0SEXP, SEXP p_a0SEXP, SEXP p_c1SEXP, SEXP p_a1SEXP, SEXP thetaSEXP, SEXP predictorsSEXP, SEXP samp_sizeSEXP, SEXP num_quadptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p_c0(p_c0SEXP);
    Rcpp::traits::input_parameter< double >::type p_a0(p_a0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p_c1(p_c1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p_a1(p_a1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type predictors(predictorsSEXP);
    Rcpp::traits::input_parameter< double >::type samp_size(samp_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type num_quadpts(num_quadptsSEXP);
    rcpp_result_gen = Rcpp::wrap(bernoulli_traceline(p_c0, p_a0, p_c1, p_a1, theta, predictors, samp_size, num_quadpts));
    return rcpp_result_gen;
END_RCPP
}
// categorical_traceline
List categorical_traceline(double p_c0, double p_a0, arma::vec p_thr, arma::vec p_c1, arma::vec p_a1, arma::vec theta, arma::mat predictors, double samp_size, double num_quadpts, int num_responses_item);
RcppExport SEXP _regDIF_categorical_traceline(SEXP p_c0SEXP, SEXP p_a0SEXP, SEXP p_thrSEXP, SEXP p_c1SEXP, SEXP p_a1SEXP, SEXP thetaSEXP, SEXP predictorsSEXP, SEXP samp_sizeSEXP, SEXP num_quadptsSEXP, SEXP num_responses_itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p_c0(p_c0SEXP);
    Rcpp::traits::input_parameter< double >::type p_a0(p_a0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p_thr(p_thrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p_c1(p_c1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p_a1(p_a1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type predictors(predictorsSEXP);
    Rcpp::traits::input_parameter< double >::type samp_size(samp_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type num_quadpts(num_quadptsSEXP);
    Rcpp::traits::input_parameter< int >::type num_responses_item(num_responses_itemSEXP);
    rcpp_result_gen = Rcpp::wrap(categorical_traceline(p_c0, p_a0, p_thr, p_c1, p_a1, theta, predictors, samp_size, num_quadpts, num_responses_item));
    return rcpp_result_gen;
END_RCPP
}
// cumulative_traceline
List cumulative_traceline(double p_c0, double p_a0, arma::vec p_thr, arma::vec p_c1, arma::vec p_a1, arma::vec theta, arma::mat predictors, double samp_size, double num_quadpts, int num_responses_item);
RcppExport SEXP _regDIF_cumulative_traceline(SEXP p_c0SEXP, SEXP p_a0SEXP, SEXP p_thrSEXP, SEXP p_c1SEXP, SEXP p_a1SEXP, SEXP thetaSEXP, SEXP predictorsSEXP, SEXP samp_sizeSEXP, SEXP num_quadptsSEXP, SEXP num_responses_itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p_c0(p_c0SEXP);
    Rcpp::traits::input_parameter< double >::type p_a0(p_a0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p_thr(p_thrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p_c1(p_c1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p_a1(p_a1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type predictors(predictorsSEXP);
    Rcpp::traits::input_parameter< double >::type samp_size(samp_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type num_quadpts(num_quadptsSEXP);
    Rcpp::traits::input_parameter< int >::type num_responses_item(num_responses_itemSEXP);
    rcpp_result_gen = Rcpp::wrap(cumulative_traceline(p_c0, p_a0, p_thr, p_c1, p_a1, theta, predictors, samp_size, num_quadpts, num_responses_item));
    return rcpp_result_gen;
END_RCPP
}
// bernoulli_traceline2
List bernoulli_traceline2(NumericVector& p_item, NumericVector& theta, NumericMatrix& predictors, double samp_size, double num_quadpts, double num_items);
RcppExport SEXP _regDIF_bernoulli_traceline2(SEXP p_itemSEXP, SEXP thetaSEXP, SEXP predictorsSEXP, SEXP samp_sizeSEXP, SEXP num_quadptsSEXP, SEXP num_itemsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type p_item(p_itemSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type predictors(predictorsSEXP);
    Rcpp::traits::input_parameter< double >::type samp_size(samp_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type num_quadpts(num_quadptsSEXP);
    Rcpp::traits::input_parameter< double >::type num_items(num_itemsSEXP);
    rcpp_result_gen = Rcpp::wrap(bernoulli_traceline2(p_item, theta, predictors, samp_size, num_quadpts, num_items));
    return rcpp_result_gen;
END_RCPP
}
// bernoulli_traceline3
List bernoulli_traceline3(arma::vec p_item, arma::vec theta, arma::mat predictors, double samp_size, double num_quadpts);
RcppExport SEXP _regDIF_bernoulli_traceline3(SEXP p_itemSEXP, SEXP thetaSEXP, SEXP predictorsSEXP, SEXP samp_sizeSEXP, SEXP num_quadptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type p_item(p_itemSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type predictors(predictorsSEXP);
    Rcpp::traits::input_parameter< double >::type samp_size(samp_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type num_quadpts(num_quadptsSEXP);
    rcpp_result_gen = Rcpp::wrap(bernoulli_traceline3(p_item, theta, predictors, samp_size, num_quadpts));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_regDIF_bernoulli_traceline4", (DL_FUNC) &_regDIF_bernoulli_traceline4, 5},
    {"_regDIF_estep", (DL_FUNC) &_regDIF_estep, 8},
    {"_regDIF_bernoulli_traceline", (DL_FUNC) &_regDIF_bernoulli_traceline, 8},
    {"_regDIF_categorical_traceline", (DL_FUNC) &_regDIF_categorical_traceline, 10},
    {"_regDIF_cumulative_traceline", (DL_FUNC) &_regDIF_cumulative_traceline, 10},
    {"_regDIF_bernoulli_traceline2", (DL_FUNC) &_regDIF_bernoulli_traceline2, 6},
    {"_regDIF_bernoulli_traceline3", (DL_FUNC) &_regDIF_bernoulli_traceline3, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_regDIF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
